LCD_X:              equ 14              ; X coordinate of LCD
LCD_Y:              equ 5               ; Y coordinate of LCD
LCD_LEN:            equ 12              ; Length of LCD in digits

;****************************************************************************
; DrawLcd
; Redraws the LCD display.
;----------------------------------------------------------------------------
; breaks: all
;****************************************************************************

DrawLcd:
    lea     -4*LCD_LEN(sp), sp          ; Allocate buffer for tiles
    lea     (sp), a0
    lea     2*LCD_LEN(sp), a1
    
    moveq   #LCD_LEN-1, d0              ; Scan all digits
    move.w  #VramLcd+$2000, d1
    lea     (Display), a2
@Loop:
    moveq   #0, d7                      ; Get next digit
    move.b  (a2)+, d7
    
    add.w   d7, d7                      ; Draw tiles for this digit
    add.w   d1, d7
    move.w  d7, (a0)+
    addq.w  #1, d7
    move.w  d7, (a1)+
    
    dbf     d0, @Loop                   ; Go for next digit
    
    moveq   #LCD_X, d7                  ; Draw the LCD screen
    moveq   #LCD_Y, d6
    moveq   #1, d5
    move.w  #LCD_LEN, a6
    move.w  #2, a5
    move.l  sp, a4
    syscall OS_DRAWTILEMAP
    
    lea     4*LCD_LEN(sp), sp           ; Done with the buffer
    rts                                 ; End of subroutine

;****************************************************************************
; ShowNumber
; Writes a number on the LCD display.
;----------------------------------------------------------------------------
; input a6.l ... Pointer to number
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

ShowNumber:
    lea     (Display), a5               ; Blank display first
    move.l  #$0F0F0F0F, (a5)+
    move.l  #$0F0F0F0F, (a5)+
    move.l  #$0F0F0F0F, (a5)+
    lea     -12(a5), a5
    
    move.b  11(a6), d6                  ; Check if we need room for
    bpl.s   @HasComma                   ; the comma
    addq.w  #1, a5
@HasComma:
    neg.b   d6
    add.b   #9, d6
    
    move.l  a6, a4                      ; Skip leading zeroes
    moveq   #9-1, d7
    tst.b   d6
    beq.s   @SkipDone
@SkipZeroes:
    tst.b   (a4)
    bne.s   @SkipDone
    addq.w  #1, a4
    addq.w  #1, a5
    subq.b  #1, d6
    beq.s   @SkipDone
    dbf     d7, @SkipZeroes
@SkipDone:
    
    tst.b   10(a6)                      ; Show sign if needed
    beq.s   @Positive
    move.b  #$0B, (a5)
@Positive:
    addq.w  #1, a5
    
    addq.w  #1, d7                      ; Draw digits (and comma if needed)
    addq.b  #1, d6
@Loop:
    move.b  (a4)+, (a5)+
    subq.b  #1, d6
    bne.s   @NoComma
    move.b  #$0A, (a5)+
@NoComma:
    dbf     d7, @Loop
    
    rts                                 ; End of subroutine

;****************************************************************************
; ShowError
; Makes the display show "Error".
;----------------------------------------------------------------------------
; breaks: d5-d7, a4-a6
;****************************************************************************

ShowError:
    lea     (Display), a6               ; Write "Error"
    move.l  #$0F0F0F0F, (a6)+
    move.l  #$0F0F0F0C, (a6)+
    move.l  #$0D0D0E0D, (a6)+
    
    rts                                 ; End of subroutine
